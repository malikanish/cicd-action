name: 'Deploy Node.js to Docker'
description: 'Build and deploy Node.js application in Docker container'
author: 'Your Name'

inputs:
  port:
    description: 'Port to run the application on'
    required: false
    default: '3000'
  container-name:
    description: 'Docker container name'
    required: false
    default: 'nodejs-app'
  image-name:
    description: 'Docker image name'
    required: false
    default: 'my-nodejs-app'

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker Image
      shell: bash
      run: |
        docker build -t ${{ inputs.image-name }}:latest .
        echo "image-id=$(docker images -q ${{ inputs.image-name }}:latest)" >> $GITHUB_OUTPUT
        
    - name: Stop existing container (if any)
      shell: bash
      run: |
        docker stop ${{ inputs.container-name }} 2>/dev/null || true
        docker rm ${{ inputs.container-name }} 2>/dev/null || true
        
    - name: Run Docker Container
      shell: bash
      run: |
        CONTAINER_ID=$(docker run -d \
          --name ${{ inputs.container-name }} \
          -p ${{ inputs.port }}:3000 \
          --restart unless-stopped \
          ${{ inputs.image-name }}:latest)
        echo "container-id=$CONTAINER_ID" >> $GITHUB_OUTPUT
        echo "Container started with ID: $CONTAINER_ID"
        
    - name: Wait for container to be ready
      shell: bash
      run: |
        echo "Waiting for container to be ready..."
        timeout 60 bash -c 'until docker exec ${{ inputs.container-name }} curl -f http://localhost:3000/health; do sleep 2; done'
        echo "Container is ready!"
        
    - name: Show container logs
      shell: bash
      run: |
        echo "=== Container Logs ==="
        docker logs ${{ inputs.container-name }} --tail 50